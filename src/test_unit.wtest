import wollok.game.*
import juego.*
import topos.tiposDeTopos.*
import clases.*
import letras.*
import mapeoTeclas.*
import menu.*
import wlklib.*

describe "Logica de clases." {

	/*Clases consta de 3 clases que base, que contienen los atributos
	 * de los objetos como hueco,letra y explosion.*/
	const hueco11 = new Hueco(position = game.at(1, 1))
	const hueco12 = new Hueco(position = game.at(1, 2))
	const hueco21 = new Hueco(position = game.at(2, 1))
	const hueco22 = new Hueco(position = game.at(2, 2))
	const a = new Letra(letra = "a", position = game.at(1, 1))
	const b = new Letra(letra = "b", position = game.at(1, 2))
	const c = new Letra(letra = "c", position = game.at(2, 1))
	const d = new Letra(letra = "d", position = game.at(2, 2))

	test "POSCIONES GENERADAS" {
		// Verficar la posicion de las letra y hueco sea (1,1).
		assert.equals(game.at(1, 1), hueco11.position())
		assert.equals(game.at(1, 1), a.position())
		// Verficar la posicion de las letra y hueco sea (1,1).
		assert.equals(game.at(1, 2), hueco12.position())
		assert.equals(game.at(1, 2), b.position())
		// Verficar la posicion de las letra y hueco sea (1,1).
		assert.equals(game.at(2, 1), hueco21.position())
		assert.equals(game.at(2, 1), c.position())
		// Verficar la posicion de las letra y hueco sea (1,1).
		assert.equals(game.at(2, 2), hueco22.position())
		assert.equals(game.at(2, 2), d.position())
	}

	test "IDENTIDAD" {
		// Verficar que "esTopo()" del hueco11 sea false.
		assert.equals(false, hueco11.esTopo())
		// Verficar la posicion de las letra y hueco sea (1,1).
		assert.equals(false, hueco12.esTopo())
		// Verficar la posicion de las letra y hueco sea (1,1).
		assert.equals(false, hueco21.esTopo())
		// Verficar la posicion de las letra y hueco sea (1,1).
		assert.equals(false, hueco22.esTopo())
		// Verficar que "esTopo()" del 'a' sea false.
		assert.equals(false, a.esTopo())
		// Verficar que "esTopo()" del 'a' sea false.
		assert.equals(false, b.esTopo())
		// Verficar que "esTopo()" del 'a' sea false.
		assert.equals(false, c.esTopo())
		// Verficar que "esTopo()" del 'a' sea false.
		assert.equals(false, d.esTopo())
	}

}

describe "Logica de letras." {

	/*Letras consta de un objeto letras que se encarga de controlar el trafico
	 * de letras generadas como una instancia de Letra, verificando que no haya repetidas.
	 */
	test"GENERACION DE LETRAS" {
		// Verifica que la lista interna de letra contenga 26 letras del abecedario.
		assert.equals(26, letras.letras().size())
		// Verifica que la lista interna de letra contenga 26 letras del abecedario.
		assert.equals(26, letras.letrasDic().size())
	// El metodo letraUnica
	}

}

describe "Logica de topos" {

	/*Topos consta de una clase padre con metodos que definen a la misma 
	 * y 5 clases que heredan los principales metodos
	 * y atributos, modificando el puntaje o la logica de calculo del mismo.
	 * El objeto topo es que interactua con los otros archivos creando nuevos topos.
	 */
//Se instancia 5 tipos de topo.
	const pepa = new TopoTierra(position = game.at(0, 0))
	const pepe = new TopoAgua(position = game.at(0, 1))
	const pepi = new TopoFuego(position = game.at(1, 1))
	const pepo = new TopoBomba(position = game.at(2, 1))
	const pepu = new TopoViento(position = game.at(2, 2))

	method initialize() {
	}

	test "TEST PUNTAJE PROPIOS DE UN TOPO" {
		// El puntaje de pepa(TopoTierra) es 5.
		assert.equals(5, pepa.puntaje())
		// El puntaje de pepe(TopoAgua) es 50.
		assert.equals(50, pepe.puntaje())
		// El puntaje de pepi(TopoFuego) es 50.
		assert.equals(50, pepi.puntaje())
		// El puntaje de pepo(TopoViento) es 0.
		assert.equals(0, pepu.puntaje())
		// El puntaje de pepo(TopoBomba) es -100.
		assert.equals(-100, pepo.puntaje())
	}

	test "TEST DE VISUALES" {
		/*Los objetos instanciado por Topo posen un metodo inicializador 
		 * que los dibuja y les asigna una letra.
		 */
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(true, game.hasVisual(pepa))
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(true, game.hasVisual(pepe))
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(true, game.hasVisual(pepi))
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(true, game.hasVisual(pepo))
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(true, game.hasVisual(pepu))
	}

	test "TEST POSICION DE UN TOPO" {
		// La posicion de pepa es el par ordenado (0,0).
		assert.equals(game.at(0, 0), pepa.position())
		// La posicion de pepe es el par ordenado (0,1).
		assert.equals(game.at(0, 1), pepe.position())
		// La posicion de pepi es el par ordenado (1,1).
		assert.equals(game.at(1, 1), pepi.position())
		// La posicion de pepo es el par ordenado (2,1).
		assert.equals(game.at(2, 1), pepo.position())
		// La posicion de pepu es el par ordenado (2,2).
		assert.equals(game.at(2, 2), pepu.position())
	}

	test "TEST IDENTIDAD DE UN TOPO" {
		// La identida de pepa como "esTopo" es true.
		assert.equals(true, pepa.esTopo())
		// La identida de pepe como "esTopo" es true.
		assert.equals(true, pepe.esTopo())
		// La identida de pepi como "esTopo" es true.
		assert.equals(true, pepi.esTopo())
		// La identida de pepo como "esTopo" es true.
		assert.equals(true, pepo.esTopo())
		// La identida de pepu como "esTopo" es true.
		assert.equals(true, pepu.esTopo())
	}

	test "INSTANCIACION DE TOPOS POR EL OBJETO TOPO" {
		// Crear el topo PAPUCHO, del tipo normal cuyo puntaje es 5 y un bonustiempo de 5
		const papucho = new TopoTierra(bonusTiempo = 5, tiempoDeVidaMaximo = 7500, position = game.at(2, 2))
		// Verificar el puntaje de PAPUCHO.
		assert.equals(5, papucho.puntaje())
		//Verificar que PAPUCHO otorga un bonus de tiempo de 5s.
		assert.equals(5, papucho.bonusTiempo())
	}

}

describe "Logica del menu." {

	/*Menu consta de una lista de item pertenecientes a la item
	 * estos representan una opcion grafica.
	 */
	const item1 = new Item(position = game.at(1, 0), image = "test1.jpg")
	const item2 = new Item(position = game.at(2, 0), image = "test2.jpg")
	const item3 = new Item(position = game.at(3, 0), image = "test3.jpg")

	test "POSICION DE LOS ITEM" {
		// Verificar que el  se encuentra en la posicion (,)
		assert.equals(game.at(1, 0), item1.position())
		// Verificar que el  se encuentra en la posicion (,)
		assert.equals(game.at(2, 0), item2.position())
		// Verificar que el  se encuentra en la posicion (,)
		assert.equals(game.at(3, 0), item3.position())
	}

	test "ITEM SELECCIONADO" {
		/*Los item pueden seleccionarse o deseleccionarse 
		 * si se presiona la tecla bindeada que ejecute el 
		 * metodo selecionar() o el metodo  deSeleccionar()
		 */
		// Verifica que item1 uno se instacia con seleccion en false.
		assert.equals(false, item1.seleccionado())
		// Verifica que item2 uno se instacia con seleccion en false.
		assert.equals(false, item2.seleccionado())
		// Verifica que item3 uno se instacia con seleccion en false.
		assert.equals(false, item3.seleccionado())
	}

}


import wollok.game.*
import juego.*
import topos.tiposDeTopos.*
import clases.*
import letras.*
import mapeoTeclas.*
import niveles.*
import menu.*

describe "Logica de juego." {

/*Juego consta
 * 
 */
}

describe "Logica de topos" {

	/*Topos consta de una clase padre con metodos que definen a la misma 
	 * y 5 clases que heredan los principales metodos
	 * y atributos, modificando el puntaje o la logica de calculo del mismo.
	 * El objeto topo es que interactua con los otros archivos creando nuevos topos.
	 */
//Se instancia 5 tipos de topo.
	const pepa = new TopoNormal(puntaje = 100, tiempoDeVidaMaximo = 5, position = game.at(0, 0), image = 'explosion/frame0.png')
	const pepe = new TopoAgua(puntaje = 150, tiempoDeVidaMaximo = 10, position = game.at(0, 1), image = 'explosion/frame0.png')
	const pepi = new TopoFuego(puntaje = 200, tiempoDeVidaMaximo = 15, position = game.at(1, 1), image = 'explosion/frame0.png')
	const pepo = new TopoTierra(puntaje = 250, tiempoDeVidaMaximo = 20, position = game.at(2, 1), image = 'explosion/frame0.png')
	const pepu = new TopoTiempo(tiempoDeVidaMaximo = 25, position = game.at(2, 2), image = 'explosion/frame0.png')

	test "TEST PUNTAJE PROPIOS DE UN TOPO" {
		// El puntaje de pepa es 100.
		assert.equals(100, pepa.puntaje())
		// El puntaje de pepe es 150.
		assert.equals(150, pepe.puntaje())
		// El puntaje de pepi es 200.
		assert.equals(200, pepi.puntaje())
		// El puntaje de pepo es 250.
		assert.equals(250, pepo.puntaje())
	}

	test "TEST DE VISUALES" {
		/*Los objetos instanciado por Topo posen un metodo inicializador 
		 * que los dibuja y les asigna una letra.
		 */
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(true, game.hasVisual(pepa))
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(true, game.hasVisual(pepe))
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(true, game.hasVisual(pepi))
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(true, game.hasVisual(pepo))
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(true, game.hasVisual(pepu))
	}

	test "TEST POSICION DE UN TOPO" {
		// La posicion de pepa es el par ordenado (0,0).
		assert.equals(game.at(0, 0), pepa.position())
		// La posicion de pepe es el par ordenado (0,1).
		assert.equals(game.at(0, 1), pepe.position())
		// La posicion de pepi es el par ordenado (1,1).
		assert.equals(game.at(1, 1), pepi.position())
		// La posicion de pepo es el par ordenado (2,1).
		assert.equals(game.at(2, 1), pepo.position())
		// La posicion de pepu es el par ordenado (2,2).
		assert.equals(game.at(2, 2), pepu.position())
	}

//
//	test "TEST TIEMPO DE VIDA MAXIMA DE UN TOPO" {
//		// El puntaje de pepa es 5.
//		assert.equals(5, pepa._tiempoDeVidaMaximo())
//		// El puntaje de pepe es 10.
//		assert.equals(10, pepe._tiempoDeVidaMaximo())
//		// El puntaje de pepi es 15.
//		assert.equals(15, pepi._tiempoDeVidaMaximo())
//		// El puntaje de pepo es 20.
//		assert.equals(20, pepo._tiempoDeVidaMaximo())
//	}
	test "TEST IDENTIDAD DE UN TOPO" {
		// La identida de pepa como "esTopo" es true.
		assert.equals(true, pepa.esTopo())
		// La identida de pepe como "esTopo" es true.
		assert.equals(true, pepe.esTopo())
		// La identida de pepi como "esTopo" es true.
		assert.equals(true, pepi.esTopo())
		// La identida de pepo como "esTopo" es true.
		assert.equals(true, pepo.esTopo())
		// La identida de pepu como "esTopo" es true.
		assert.equals(true, pepu.esTopo())
		// La identida de pepa como "esLetra" es false.
		assert.equals(false, pepa.esLetra())
		// La identida de pepe como "esLetra" es false.
		assert.equals(false, pepe.esLetra())
		// La identida de pepi como "esLetra" es false.
		assert.equals(false, pepi.esLetra())
		// La identida de pepi como "esLetra" es false.
		assert.equals(false, pepi.esLetra())
		// La identida de pepu como "esLetra" es false.
		assert.equals(false, pepo.esLetra())
		// La identida de pepu como "esLetra" es false.
		assert.equals(false, pepu.esLetra())
	}

	test "TEST REMOVER(MATAR) TOPO DEL BOARD" {
		// Remueve pepa del board usando matar().
		pepa.matar()
		// Remueve pepe del board usando matar().
		pepe.matar()
		// Remueve pepi del board usando matar().
		pepi.matar()
		// Remueve pepo del board usando matar().
		pepo.matar()
		// Remueve pepu del board usando matar().
		pepu.matar()
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(false, game.hasVisual(pepa))
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(false, game.hasVisual(pepe))
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(false, game.hasVisual(pepi))
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(false, game.hasVisual(pepo))
		// Verificar se encuentra la "visual" de pepa en el board.
		assert.equals(false, game.hasVisual(pepu))
	}

	test "TEST LOGICA TOPOTIEMPO" {
		// El puntaje de pepu es 100.
		assert.equals(100, pepu.puntaje())
		// Modificando solo el tiempoDeVida a 10.
		const pepu_10_de_vida = new TopoTiempo(tiempoDeVida = 10, tiempoDeVidaMaximo = 25, position = game.at(2, 2), image = 'explosion/frame0.png')
		assert.equals(10, pepu_10_de_vida.puntaje())
		// Modificando solo el puntajeBase a 1000.
		const pepu_1000_de_puntaje_base = new TopoTiempo(puntajeBase = 1000, tiempoDeVidaMaximo = 25, position = game.at(2, 2), image = 'explosion/frame0.png')
		assert.equals(1000, pepu_1000_de_puntaje_base.puntaje())
		// Modificando el puntajeBase a 1000 y el tiempoDeVida a 5.
		const pepu_1000_y_5_valores = new TopoTiempo(puntajeBase = 1000, tiempoDeVidaMaximo = 25, position = game.at(2, 2), image = 'explosion/frame0.png')
		assert.equals(1000, pepu_1000_y_5_valores.puntaje())
	}

	test "INSTANCIACION DE TOPOS POR EL OBJETO TOPO" {
	// Crear el topo PAPUCHO, del tipo normal cuyo puntaje es 100.
	// Verificar el puntaje de PAPUCHO.
	// Verfificar posicion de papucho.
	}

}

describe "Logica de clases." {

/*Clases consta
 * 
 */
}

describe "Logica de letras." {

/*Letras consta
 * 
 */
}

describe "Logica del mapeo de letras." {

/*mapeo de teclas consta
 * 
 */
}

describe "Logica del menu." {

/*Menu consta
 * 
 */
}

describe "Logica del la eleccion de niveles" {

/*Niveles consta
 * 
 */
}

